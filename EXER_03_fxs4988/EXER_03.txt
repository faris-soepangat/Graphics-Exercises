#-----------------------------------------------------------------
Exercise 03

#-----------------------------------------------------------------
Purpose:

  * Demonstrate working C development environment.  (Geez, don't
      you have that working by this point?)

  * Demonstrate ability to write ONE simple C function, the
      ZYX Euler rotation.

#-----------------------------------------------------------------
Background:

  * All the math you need in outlined in the Euler Angle
      Transformation handout on Canvas.

#-----------------------------------------------------------------
Tasks:

  1. Download EXER_03_dalioba.zip from Canvas.

  2. Unzip this file somewhere convenient.

  3. Change 'dalioba' in the name of the directory to YOUR NetID.
     (Your NetID is three letters followed by four or five digits.
      The directory name will now be something like
      'EXER_03_abc1234' but with YOUR NetID in place of
      'abc1234'.)

  4. Look in that directory.  There's a Template directory that
     has some files in it.  Move them up one level into the
     'EXER_03_abc1234' directory.

  5. Change the header lines in the file transforms.c.

      -- Line 1:  Family name first, then a comma, then
                  personal name.

      -- Line 2:  Your NetID.

      -- Line 3:  The date you edited the file, in the format
                  YYYY-MM-DD (all digits!).

  6. Compile thusly,

    $ make
    gcc -g -Wall -Wextra -fsanitize=address -c matrix.c
    gcc -g -Wall -Wextra -fsanitize=address -c matrixTest.c
    gcc -fsanitize=address -o matrixTest matrix.o matrixTest.o -lm
    gcc -g -Wall -Wextra -fsanitize=address -c transforms.c
    transforms.c: In function ‘eulerRotateMatrix’:
    transforms.c:11:37: warning: unused parameter ‘center’ [-Wunused-parameter]
       11 | void eulerRotateMatrix( const Point center, const FLOAT64 phi, const FLOAT64 theta, const FLOAT64 psi, Matrix xform )
          |                         ~~~~~~~~~~~~^~~~~~
    transforms.c:11:59: warning: unused parameter ‘phi’ [-Wunused-parameter]
       11 | void eulerRotateMatrix( const Point center, const FLOAT64 phi, const FLOAT64 theta, const FLOAT64 psi, Matrix xform )
          |                                             ~~~~~~~~~~~~~~^~~
    transforms.c:11:78: warning: unused parameter ‘theta’ [-Wunused-parameter]
       11 | void eulerRotateMatrix( const Point center, const FLOAT64 phi, const FLOAT64 theta, const FLOAT64 psi, Matrix xform )
          |                                                                ~~~~~~~~~~~~~~^~~~~
    transforms.c:11:99: warning: unused parameter ‘psi’ [-Wunused-parameter]
       11 | ix( const Point center, const FLOAT64 phi, const FLOAT64 theta, const FLOAT64 psi, Matrix xform )
          |                                                                 ~~~~~~~~~~~~~~^~~

    transforms.c:11:111: warning: unused parameter ‘xform’ [-Wunused-parameter]
       11 | int center, const FLOAT64 phi, const FLOAT64 theta, const FLOAT64 psi, Matrix xform )
          |                                                                        ~~~~~~~^~~~~

      .
      .
      .

    $

  7. I've edited the output here for length.  You get all those
      warnings because you haven't yet written the body of the
      eulerRotateMatrix() function in transforms.c.

  8. Now edit transforms.c and put the proper code in
      eulerRotateMatrix().  (There are TODO comments describing
      what needs to be done.)

  9. After you're done with that, remake and now run thusly,

    $ make clean
    rm -f matrixTest transformsTest *.o
    $ make
    gcc -g -Wall -Wextra -fsanitize=address -c matrix.c
    gcc -g -Wall -Wextra -fsanitize=address -c matrixTest.c
    gcc -fsanitize=address -o matrixTest matrix.o matrixTest.o -lm
    gcc -g -Wall -Wextra -fsanitize=address -c transforms.c
    gcc -g -Wall -Wextra -fsanitize=address -c transformsTest.c
    gcc -fsanitize=address -o transformsTest matrix.o transforms.o transformsTest.o -lm
    $ ./transformsTest
    //-----------------------------------------------------------------
    //-- pZero ------------------
                   0
                   0
                   0
                   1
    //-- pHalf ------------------
                 0.5
                 0.5
                 0.5
                   1
    //-- pX ---------------------
                   1
                   0
                   0
                   1

      .
      .
      .

    //-- (euler pHalf, 30°, 45°, 60°)·pYZ --------------
             0.37059
          -0.0767518
             1.13294
                   1

    //-- (euler pHalf, 30°, 45°, 60°)·pZ ---------------
            0.982963
           -0.203578
            0.352608
                   1

    //-- (euler pHalf, 30°, 45°, 60°)·pXYZ -------------
            0.724144
            0.850025
             1.25976
                   1

    //-----------------------------------------------------------------
    $

 10. I've edited the output here for length.  The complete results
      are shown in the file Results/transformsTest-results.txt.
      Your results should match EXACTLY.  If they don't, STOP
      RIGHT HERE and figure out what's wrong.  If this doesn't
      work perfectly, there's no point going any further.

#-----------------------------------------------------------------
Hints:
  1. Ensure your programs compile and runs correctly.  You should
     not get ANY warnings or errors when you compile.  ALWAYS
     compile your code with -Wall and -Wextra and deal with ANY
     warnings or errors that are identified.  ALWAYS compile your
     code with -fsanitize=address and deal with ANY warnings or
     errors reported.

     Ensure your test results match those given in the Results/
     subdirectory.  Not matching EXACTLY means you are not
     performing the matrix and/or transform operations correctly.

     ('EXACTLY' means character-by-character the same in the
      output.  No differences in values.  Use diff to ensure that
      your output really does match EXACTLY.)

  2. Ensure that you update the three header lines in the source
     file with YOUR name (family name first, then a comma, then
     your personal name), YOUR NetID, and the date you edit the
     file, in the format YYYY-MM-DD (all digits!).

  3. This is not a large exercise.  There are only three (3)
      spots you have to write some code.  They are all in
      transforms.c and are marked with TODO comments.

        transforms.c:16:  // TODO : Five lines of code.  (Well, in the reference solution
        transforms.c:23:  // TODO : Five lines of code.  (Five function calls.)
        transforms.c:28:  // TODO : Six lines of code.  (Two declarations and four

      for a grand total of 16 lines of code.  Easy!

      Read carefully the comments indicating what needs to be
      written in each of the TODO spots.

      Depending on how you format your code, you might have more
      or fewer lines of code than this.  Do get super-concerned
      unless you find yourself writing zillions of lines of code.
      If that's the case, you're probably off in the weeds.  Step
      back and think about it a bit more.

#-----------------------------------------------------------------
